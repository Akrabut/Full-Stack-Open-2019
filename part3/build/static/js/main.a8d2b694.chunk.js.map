{"version":3,"sources":["services/server_communication.js","components/persons.js","components/notification.js","index.js"],"names":["baseUrl","read","id","axios","get","then","response","data","catch","error","console","log","create","person","post","patch","request","Person","props","name","number","value","onClick","event","val","target","split","window","confirm","delete","toggle","Persons","useState","deleted","setDeleted","persons","map","key","Notification","message","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","ReactDOM","render","setPersons","Set","personSet","setSet","newName","setNewName","newNumber","setNewNumber","toSearch","setToSearch","setMessage","useEffect","Comms","personsParam","reduce","set","add","init_set","displayMessage","setTimeout","changeNumber","retPerson","p","filteredPersons","filter","toLowerCase","includes","onChange","onSubmit","preventDefault","has","find","alert","concat","type","document","getElementById"],"mappings":"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","file":"static/js/main.a8d2b694.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nfunction read(id='') {\n  return (\n    axios.get(`${baseUrl}/${id}`)\n      .then(response => response.data)\n      .catch(error => console.log(error))\n  )\n}\n\nfunction create(person) {\n  return (\n    axios.post(baseUrl, person)\n      .then(response => response.data)\n      .catch(error => console.log(error))\n  )\n}\n\nfunction patch(person) {\n  console.log(person)\n  return (\n    axios.patch(`${baseUrl}/${person.id}`, person)\n      .then(request => request.data)\n      .catch(error => console.log(error))\n  )\n}\n\nfunction destroy(id) {\n  return (\n    axios.delete(`${baseUrl}/${id}`)\n      .then(response => console.log(`person with id = ${id} deleted`))\n      .catch(error => console.log(error))\n  )\n}\n\nexport default {read, create, patch}\nexport {destroy}","import React, {useState} from 'react'\nimport {destroy} from '../services/server_communication'\n\n// const generateId = () => {\n//   function getNum() {\n//     const date = new Date()\n//     return `${date.getDate()}${date.getMilliseconds()}`\n//   }\n//   return setTimeout(getNum, 1)\n// }\n\n\nconst Person = props => {\n  const handleDelete = (event) => {\n    const val = event.target.value.split(',')\n    if (window.confirm(`Are you sure you want to delete ${val[1]}?`)) {\n      destroy(val[0])\n      props.toggle()\n    }\n  }\n\n  return (\n    <div>\n      {`${props.person.name} - ${props.person.number} `}\n      <button value={[props.person.id, props.person.name]} onClick={handleDelete}>delete</button>\n    </div>\n  )\n}\n\nconst Persons = (props) => {\n  const [deleted, setDeleted] = useState(false)\n\n  // this should be passed as a callback ot the child to toggle deleted\n  // this doesn't seem to work for some reason although it was suggested as a solution by other people...\n  function toggle() {\n    console.log(deleted);\n    setDeleted(!deleted)\n    console.log(deleted);\n  }\n\n  return (\n    <ul>\n      {props.persons.map(person => <li key={person.id}><Person person={person} toggle={toggle}></Person></li>)}\n    </ul>\n  )\n}\n\nexport default Persons","import React from 'react'\n\nconst Notification = (props) => {\n\n  const style = {\n    color: 'green',\n    background: 'lightgrey',\n    fontSize: '20',\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  }\n\n  if(!props.message) return ''\n  return (\n    <div style={style}>\n      {props.message}\n    </div>\n  )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport Persons from './components/persons'\nimport Notification from './components/notification'\nimport Comms from './services/server_communication'\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [personSet, setSet] = useState(new Set())\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [toSearch, setToSearch] = useState('')\n  const [message, setMessage] = useState('')\n\n  function init_set(persons) {\n    setSet(persons.reduce((set, person) => set.add(person.name), new Set()))\n  }\n\n  useEffect(() => {\n      console.log('in use effect');\n      Comms.read()\n        .then((personsParam) => {\n          console.log(personsParam)\n          setPersons(personsParam)\n          console.log('hi');\n          init_set(personsParam)\n          console.log('persons set');\n        })\n        .catch(error => console.log(error))\n  }, [])\n\n  const displayMessage = (message) => {\n    setMessage(message)\n    setTimeout(() => setMessage(''),  5000)\n  }\n\n  const changeNumber = person => {\n    if (!window.confirm(`${person.name} is already in the phonebook, replace the old number with a new one?`)) return\n    Comms.patch({...person, number: newNumber})\n      .then(retPerson => {\n        setPersons(persons.map(p => retPerson.id === p.id ? retPerson : p))\n        console.log('put operation completed');\n        displayMessage(`Number changed to ${newNumber}`)\n        setNewName('')\n        setNewNumber('')\n    })\n  }\n\n  // called upon submission, prevents default behavior (for forms - refresh upon submission)\n  // and appends the newName to the persons array, then resets newName\n  const addPerson = (event) => {\n    event.preventDefault()\n    console.log(event);\n    if (personSet.has(newName)) {\n      const person = persons.find(person => person.name === newName)\n      if (newNumber !== person.number) return changeNumber(person)\n      return alert(`${newName} is already in the phonebook`)\n    }\n    Comms.create({name: newName, number: newNumber})\n      .then((person) => {\n        setPersons(persons.concat(person))\n        setSet(personSet.add(person.name))\n        displayMessage(`${person.name} added`)\n        setNewName('')\n        setNewNumber('')\n      })\n  }\n\n  // takes an event as an argument (as it responds on an onChange event)\n  // sets newName with the event.target (the form).value which is basically the input in the text field\n  // TODO: im not really sure how this part works\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    console.log(event.target.value)\n    setToSearch(event.target.value)\n  }\n\n  let filteredPersons = persons.filter(person => person.name.toLowerCase().includes(toSearch.toLowerCase()))\n\n  return (\n    <div>\n      <Notification message={message}></Notification>\n      <div>\n        <h2>Search</h2>\n        enter name:<input value={toSearch} onChange={handleSearchChange}></input>\n      </div>\n      <h2>Add new contact</h2>\n      {/* calls the addPerson callback upon submission */}\n      <form onSubmit={addPerson}>\n        <div>\n          {/* a text input that sets its value to newName and has handleNameChange callback\n          upon change of newName */}\n          name:<input value={newName} onChange={handleNameChange}></input>\n          <br></br>\n          number:<input value={newNumber} onChange={handleNumberChange}></input>\n          <br></br>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <div>\n        <Persons persons={filteredPersons}></Persons>\n      </div>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}